package com.comcast.homesecurity.domain.pojo;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;


public class Event {

    private static final Logger logger = Logger.getLogger(Event.class);

    String eventId, eventName, mediaType, channel, instance;
    String siteId;
    long timestamp;
    String value;

    Map<String, String> metadata;

    public Event() {}

    public Event(String eventId, String eventName, String mediaType,
                 String channel, String instance, long timestamp, String value, Map<String,String> metadata) {
        super();
        this.eventId = eventId;
        this.eventName = eventName;
        this.mediaType = mediaType;
        this.channel = channel;
        this.instance = instance;
        this.timestamp = timestamp;
        this.value = value;
        this.metadata = metadata;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }

    public String getEventId() {
        return eventId;
    }

    public void setEventId(String eventId) {
        this.eventId = eventId;
    }

    public String getEventName() {
        return eventName;
    }

    public void setEventName(String eventName) {
        this.eventName = eventName;
    }

    public String getMediaType() {
        return mediaType;
    }

    public void setMediaType(String mediaType) {
        this.mediaType = mediaType;
    }

    public String getChannel() {
        return channel;
    }

    public void setChannel(String channel) {
        this.channel = channel;
    }

    public String getInstance() {
        return instance;
    }

    public void setInstance(String instance) {
        this.instance = instance;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }

    public String getSiteId() {
        return siteId;
    }

    public void setSiteId(String siteId) {
        this.siteId = siteId;
    }



    public void addMetadata(Metadata metadata) {

        if (metadata.isWithaction()
                || StringUtils.isNotEmpty(metadata.getMetadataName())) {
            if (this.metadata == null)
                this.metadata = new HashMap<String, String>();
            if (metadata.isWithaction())
                this.metadata.put(metadata.getMetadataName(), metadata.getMetadataValue());
        }
    }
    
    public static Event createInstance(String siteId, String iControlEventAsJson) throws JSONException {
    	Event event = createInstance1(iControlEventAsJson);
    	event.setSiteId(siteId);
    	return event;
    }

    public static Event createInstance1(String iControlEventAsJson) throws JSONException {
        Event ev = new Event();
        JSONObject jsonObj = null ;
        
        try {
            jsonObj =  new JSONObject(iControlEventAsJson);
        } catch (JSONException e) {
            logger.error("error in creating Instance " + iControlEventAsJson + " " + e);
        }

        logger.debug(jsonObj.toString());
        JSONArray entryArr = jsonObj.optJSONArray("entry");
        if (entryArr == null) {
        	entryArr = jsonObj.optJSONArray("icEvent");
        }
        
        JSONObject entryObj = entryArr.getJSONObject(0);
        ev.setMediaType(entryObj.getString("mediaType"));
        ev.setEventId(entryObj.getString("id"));
        ev.setTimestamp(entryObj.getLong("ts"));
        
        if(!entryObj.isNull("instance")) {
        	ev.setInstance(entryObj.getString("instance"));	
        } else if(!entryObj.isNull("instanceId")){
        	ev.setInstance(entryObj.getString("instanceId"));
        }
        
        ev.setValue(entryObj.getString("value"));
        ev.setChannel(entryObj.getString("channel"));
        if(!entryObj.isNull("siteId")) {
        	ev.setSiteId(entryObj.getString("siteId"));
        }
        //metadata
        JSONArray metaDataArr = entryObj.optJSONArray("metaData");
        if (metaDataArr != null && metaDataArr.length() > 0 ) {
	        Map<String, String> metadata = new HashMap<String,String>();
	        for(int i=0; i<metaDataArr.length(); i++) {
	        	JSONObject metaDataObj = metaDataArr.getJSONObject(i);
	        	String key = metaDataObj.getString("name");
	        	String value = metaDataObj.getString("value");
	        	if(key.equals("siteId"))
	        		ev.setSiteId(value);
	        	else
	        		metadata.put(key, value);
	        }
	        ev.metadata = metadata;
        } else {
        	metaDataArr = entryObj.optJSONArray("context");
        	Map<String, String> metadata = new HashMap<String,String>();
        	for(int i=0; i<metaDataArr.length(); i++) {
	        	JSONObject metaDataObj = metaDataArr.getJSONObject(i);
	        	String key = metaDataObj.getString("mediaType");
	        	String value = metaDataObj.getString("value");
	        	if(key.equals("siteId"))
	        		ev.setSiteId(value);
	        	else
	        		metadata.put(key, value);
	        }
        	ev.metadata = metadata;
        }
        return ev;
    }


    @Override
    public boolean equals(Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this,
                ToStringStyle.SHORT_PREFIX_STYLE);
    }
}
